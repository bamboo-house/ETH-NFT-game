{"ast":null,"code":"var _jsxFileName = \"/Users/takeuchishuto/Documents/UNCHAIN/ETH-NFT-game/nft-game-starter-project/src/App.js\",\n  _s = $RefreshSig$();\nimport React, { useEffect, useState } from 'react';\nimport twitterLogo from \"./assets/twitter-logo.svg\";\nimport './App.css';\nimport SelectCharacter from './Components/SelectCharacter';\nimport { CONTRACT_ADDRESS, transformCharacterData } from './constants';\nimport { ethers } from \"ethers\";\nimport myEpicGame from \"./utils/MyEpicGame.json\";\nimport Arena from \"./Components/Arena\";\n\n// Constants\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst TWITTER_HANDLE = 'あなたのTwitterハンドル';\nconst TWITTER_LINK = `https://twitter.com/${TWITTER_HANDLE}`;\nconst App = () => {\n  _s();\n  const [currentAccount, setCurrentAccount] = useState(null);\n  const [characterNFT, setCharacterNFT] = useState(null);\n  const checkNetwork = async () => {\n    try {\n      if (window.ethereum.networkVersion !== \"80001\") {\n        alert(\"Mumbai Test Network に接続してください！\");\n      } else {\n        console.log(\"Mumbai に接続されています.\");\n      }\n    } catch (error) {\n      console.log(error);\n    }\n  };\n  const checkIfWalletIsConnected = async () => {\n    try {\n      const {\n        ethereum\n      } = window;\n      if (!ethereum) {\n        console.log(\"Make sure you have MetaMask!\");\n        return;\n      } else {\n        console.log(\"We have the ethereum object\", ethereum);\n        const accounts = await ethereum.request({\n          method: \"eth_accounts\"\n        });\n        if (accounts.length !== 0) {\n          const account = accounts[0];\n          console.log(\"Found an authorized account:\", account);\n          setCurrentAccount(account);\n        } else {\n          console.log(\"No authorized account found\");\n        }\n      }\n    } catch (error) {\n      console.log(error);\n    }\n  };\n\n  // レンダリングメソッド\n  const renderContent = () => {\n    if (!currentAccount) {\n      return /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"connect-wallet-container\",\n        children: [/*#__PURE__*/_jsxDEV(\"img\", {\n          src: \"https://i.imgur.com/TXBQ4cC.png\",\n          alt: \"LUFFY\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 57,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n          className: \"cta-button connect-wallet-button\",\n          onClick: connectWalletAction,\n          children: \"Connect Wallet to Get Started\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 58,\n          columnNumber: 13\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 56,\n        columnNumber: 11\n      }, this);\n    } else if (currentAccount && !characterNFT) {\n      return /*#__PURE__*/_jsxDEV(SelectCharacter, {\n        setCharacterNFT: setCharacterNFT\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 67,\n        columnNumber: 16\n      }, this);\n    } else if (currentAccount && characterNFT) {\n      return /*#__PURE__*/_jsxDEV(Arena, {\n        characterNFT: characterNFT\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 69,\n        columnNumber: 16\n      }, this);\n    }\n  };\n  const connectWalletAction = async () => {\n    try {\n      const {\n        ethereum\n      } = window;\n      if (!ethereum) {\n        alert(\"Get MetaMask!\");\n        return;\n      }\n      checkIfWalletIsConnected();\n      const accounts = await ethereum.request({\n        method: \"eth_requestAccounts\"\n      });\n      console.log(\"Connected\", accounts[0]);\n      setCurrentAccount(accounts[0]);\n      checkNetwork();\n    } catch (error) {\n      console.log(error);\n    }\n  };\n  useEffect(() => {\n    checkIfWalletIsConnected();\n  }, []);\n  useEffect(() => {\n    const fetchNFTMetadata = async () => {\n      console.log(\"Checking for Character NFT on address:\", currentAccount);\n      const provider = new ethers.providers.Web3Provider(window.ethereum);\n      const signer = provider.getSigner();\n      const gameContract = new ethers.Contract(CONTRACT_ADDRESS, myEpicGame.abi, signer);\n      const txn = await gameContract.checkIfUserHasNFT();\n      if (txn.name) {\n        console.log(\"User has character NFT\");\n        setCharacterNFT(transformCharacterData(txn));\n      } else {\n        console.log(\"No character NFT found\");\n      }\n    };\n    if (currentAccount) {\n      console.log(\"CurrentAccount:\", currentAccount);\n      fetchNFTMetadata();\n    }\n  }, [currentAccount]);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"App\",\n    children: /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"container\",\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"header-container\",\n        children: [/*#__PURE__*/_jsxDEV(\"p\", {\n          className: \"header gradient-text\",\n          children: \"\\u26A1\\uFE0F METAVERSE GAME \\u26A1\\uFE0F\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 130,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n          className: \"sub-text\",\n          children: \"\\u30D7\\u30EC\\u30A4\\u30E4\\u30FC\\u3068\\u5354\\u529B\\u3057\\u3066\\u30DC\\u30B9\\u3092\\u5012\\u305D\\u3046\\u2728\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 131,\n          columnNumber: 11\n        }, this), renderContent()]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 129,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"footer-container\",\n        children: [/*#__PURE__*/_jsxDEV(\"img\", {\n          alt: \"Twitter Logo\",\n          className: \"twitter-logo\",\n          src: twitterLogo\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 135,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"a\", {\n          className: \"footer-text\",\n          href: TWITTER_LINK,\n          target: \"_blank\",\n          rel: \"noreferrer\",\n          children: `built with @${TWITTER_HANDLE}`\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 136,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 134,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 128,\n      columnNumber: 7\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 127,\n    columnNumber: 5\n  }, this);\n};\n_s(App, \"aqKBxdUsX8kS7n/0F2mn899P2+s=\");\n_c = App;\nexport default App;\nvar _c;\n$RefreshReg$(_c, \"App\");","map":{"version":3,"names":["React","useEffect","useState","SelectCharacter","CONTRACT_ADDRESS","transformCharacterData","ethers","myEpicGame","Arena","TWITTER_HANDLE","TWITTER_LINK","App","currentAccount","setCurrentAccount","characterNFT","setCharacterNFT","checkNetwork","window","ethereum","networkVersion","alert","console","log","error","checkIfWalletIsConnected","accounts","request","method","length","account","renderContent","connectWalletAction","fetchNFTMetadata","provider","providers","Web3Provider","signer","getSigner","gameContract","Contract","abi","txn","checkIfUserHasNFT","name","twitterLogo"],"sources":["/Users/takeuchishuto/Documents/UNCHAIN/ETH-NFT-game/nft-game-starter-project/src/App.js"],"sourcesContent":["import React, { useEffect, useState } from 'react';\nimport twitterLogo from './assets/twitter-logo.svg';\nimport './App.css';\nimport SelectCharacter from './Components/SelectCharacter';\nimport { CONTRACT_ADDRESS, transformCharacterData } from './constants';\nimport { ethers } from \"ethers\";\nimport myEpicGame from \"./utils/MyEpicGame.json\";\nimport Arena from \"./Components/Arena\";\n\n// Constants\nconst TWITTER_HANDLE = 'あなたのTwitterハンドル';\nconst TWITTER_LINK = `https://twitter.com/${TWITTER_HANDLE}`;\n\nconst App = () => {\n  const [currentAccount, setCurrentAccount] = useState(null);\n  const [characterNFT, setCharacterNFT] = useState(null);\n\n  const checkNetwork = async () => {\n    try {\n      if (window.ethereum.networkVersion !== \"80001\") {\n        alert(\"Mumbai Test Network に接続してください！\");\n      } else {\n        console.log(\"Mumbai に接続されています.\");\n      }\n    } catch (error) {\n      console.log(error);\n    }\n  };\n\n  const checkIfWalletIsConnected = async () => {\n    try {\n      const { ethereum } = window;\n      if (!ethereum) {\n        console.log(\"Make sure you have MetaMask!\");\n        return;\n      } else {\n        console.log(\"We have the ethereum object\", ethereum);\n        const accounts = await ethereum.request({ method: \"eth_accounts\" });\n        if (accounts.length !== 0) {\n          const account = accounts[0];\n          console.log(\"Found an authorized account:\", account);\n          setCurrentAccount(account);\n        } else {\n          console.log(\"No authorized account found\");\n        }\n      }\n    } catch (error) {\n      console.log(error);\n    }\n  };\n\n    // レンダリングメソッド\n    const renderContent = () => {\n      if (!currentAccount) {\n        return (\n          <div className=\"connect-wallet-container\">\n            <img src=\"https://i.imgur.com/TXBQ4cC.png\" alt=\"LUFFY\"/>\n            <button\n              className=\"cta-button connect-wallet-button\"\n              onClick={connectWalletAction}\n            >\n              Connect Wallet to Get Started\n            </button>\n          </div>\n        );\n      } else if (currentAccount && !characterNFT) {\n        return <SelectCharacter setCharacterNFT={setCharacterNFT} />\n      } else if (currentAccount && characterNFT) {\n        return <Arena characterNFT={characterNFT} />\n      }\n    };\n\n  const connectWalletAction = async () => {\n    try {\n      const { ethereum } = window;\n      if (!ethereum) {\n        alert(\"Get MetaMask!\");\n        return;\n      }\n\n      checkIfWalletIsConnected();\n\n      const accounts = await ethereum.request({\n        method: \"eth_requestAccounts\",\n      });\n      console.log(\"Connected\", accounts[0]);\n      setCurrentAccount(accounts[0]);\n      \n      checkNetwork();\n    } catch (error) {\n      console.log(error);\n    }\n  };\n\n  useEffect(() => {\n    checkIfWalletIsConnected();\n  }, []);\n\n  useEffect(() => {\n    const fetchNFTMetadata = async () => {\n      console.log(\"Checking for Character NFT on address:\", currentAccount);\n\n      const provider = new ethers.providers.Web3Provider(window.ethereum);\n      const signer = provider.getSigner();\n      const gameContract = new ethers.Contract(\n        CONTRACT_ADDRESS,\n        myEpicGame.abi,\n        signer\n      );\n\n      const txn = await gameContract.checkIfUserHasNFT();\n      if (txn.name) {\n        console.log(\"User has character NFT\");\n        setCharacterNFT(transformCharacterData(txn));\n      } else {\n        console.log(\"No character NFT found\");\n      }\n    };\n\n    if (currentAccount) {\n      console.log(\"CurrentAccount:\", currentAccount);\n      fetchNFTMetadata();\n    }\n  }, [currentAccount]);\n\n  return (\n    <div className=\"App\">\n      <div className=\"container\">\n        <div className=\"header-container\">\n          <p className=\"header gradient-text\">⚡️ METAVERSE GAME ⚡️</p>\n          <p className=\"sub-text\">プレイヤーと協力してボスを倒そう✨</p>\n          {renderContent()}\n        </div>\n        <div className=\"footer-container\">\n          <img alt=\"Twitter Logo\" className=\"twitter-logo\" src={twitterLogo} />\n          <a\n            className=\"footer-text\"\n            href={TWITTER_LINK}\n            target=\"_blank\"\n            rel=\"noreferrer\"\n          >{`built with @${TWITTER_HANDLE}`}</a>\n        </div>\n      </div>\n    </div>\n  );\n};\n\nexport default App;\n"],"mappings":"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"},"metadata":{},"sourceType":"module"}